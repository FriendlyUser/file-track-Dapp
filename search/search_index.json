{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"File-track Dapp Simple Dapp that can track files uploaded to IPFS. Upload and track IPFS files securely on the Ethereum Network, supports UPORT Images are converted from pdf to png using imagemagick convert -density 400 -resize 50% ipfs-dapp.pdf ipfs-dapp.png Tasks [x] Add Form Validation [ ] Disable buttons conditionally. [ ] Adding tags to smart contract Filename IPFS Hash url ENGR001 Report QmSE4qrynVfCU1Vevhvaeav6RWtN5vFKSn3KaC3GuSKPvq ENGR001 ENGR002 Report QmezncgKe3NEMyN9mmitT3BLwLE3adCNyNDUSJssgCqGXb ENGR002 ENGR003 Report QmZb7crH2YYqwvq5d2pCjZxAovzqXkhWwnEE993UM4jikk ENGR003 ENGR446 Report QmeQegoUZ3YMNpgUvinU424FtrMUYNNHgQafmaThrzG9nZ ENGR446 Installation Install Truffle and Ganache CLI globally. If you prefer, the graphical version of Ganache works as well! javascript npm install -g truffle npm install -g ganache-cli Download the box. This also takes care of installing the necessary dependencies. javascript truffle unbox drizzle Run the development blockchain, we recommend passing in a blocktime. Otherwise, its difficult to track things like loading indicators because Ganache will mine instantly. javascript // 3 second blocktime. ganache-cli -b 3 Compile and migrate the smart contracts. Note inside the development console we don't preface commands with truffle . javascript compile migrate Run the webpack server for front-end hot reloading (outside the development console). Smart contract changes must be manually recompiled and migrated. javascript // Serves the front-end on http://localhost:3000 npm run start Truffle can run tests written in Solidity or JavaScript against your smart contracts. Note the command varies slightly if you're in or outside of the development console. ```javascript // If inside the development console. test // If outside the development console.. truffle test ``` Jest is included for testing React components. Compile your contracts before running Jest, or you may receive some file not found errors. javascript // Run Jest outside of the development console for front-end component tests. npm run test To build the application for production, use the build command. A production build will be in the build_webpack folder. javascript npm run build Other doxity options interaction : { network : 2 , providerUrl : https://morden.infura.io/sign_up_to_get_a_hash }, // option to whitelist various data whitelist : { // the keyname `all` will be used for whitelist defaults all : { abi : true, methods : true, bytecode : false, // bytecode is false or undefined, it won't be shown source : false // source is false or undefined, won't be shown }, DigixMath : { source : true // source code uniquely shown for this contract, bytecode still hidden } }","title":"File-track Dapp"},{"location":"#file-track-dapp","text":"Simple Dapp that can track files uploaded to IPFS. Upload and track IPFS files securely on the Ethereum Network, supports UPORT Images are converted from pdf to png using imagemagick convert -density 400 -resize 50% ipfs-dapp.pdf ipfs-dapp.png","title":"File-track Dapp"},{"location":"#tasks","text":"[x] Add Form Validation [ ] Disable buttons conditionally. [ ] Adding tags to smart contract Filename IPFS Hash url ENGR001 Report QmSE4qrynVfCU1Vevhvaeav6RWtN5vFKSn3KaC3GuSKPvq ENGR001 ENGR002 Report QmezncgKe3NEMyN9mmitT3BLwLE3adCNyNDUSJssgCqGXb ENGR002 ENGR003 Report QmZb7crH2YYqwvq5d2pCjZxAovzqXkhWwnEE993UM4jikk ENGR003 ENGR446 Report QmeQegoUZ3YMNpgUvinU424FtrMUYNNHgQafmaThrzG9nZ ENGR446","title":"Tasks"},{"location":"#installation","text":"Install Truffle and Ganache CLI globally. If you prefer, the graphical version of Ganache works as well! javascript npm install -g truffle npm install -g ganache-cli Download the box. This also takes care of installing the necessary dependencies. javascript truffle unbox drizzle Run the development blockchain, we recommend passing in a blocktime. Otherwise, its difficult to track things like loading indicators because Ganache will mine instantly. javascript // 3 second blocktime. ganache-cli -b 3 Compile and migrate the smart contracts. Note inside the development console we don't preface commands with truffle . javascript compile migrate Run the webpack server for front-end hot reloading (outside the development console). Smart contract changes must be manually recompiled and migrated. javascript // Serves the front-end on http://localhost:3000 npm run start Truffle can run tests written in Solidity or JavaScript against your smart contracts. Note the command varies slightly if you're in or outside of the development console. ```javascript // If inside the development console. test // If outside the development console.. truffle test ``` Jest is included for testing React components. Compile your contracts before running Jest, or you may receive some file not found errors. javascript // Run Jest outside of the development console for front-end component tests. npm run test To build the application for production, use the build command. A production build will be in the build_webpack folder. javascript npm run build Other doxity options interaction : { network : 2 , providerUrl : https://morden.infura.io/sign_up_to_get_a_hash }, // option to whitelist various data whitelist : { // the keyname `all` will be used for whitelist defaults all : { abi : true, methods : true, bytecode : false, // bytecode is false or undefined, it won't be shown source : false // source is false or undefined, won't be shown }, DigixMath : { source : true // source code uniquely shown for this contract, bytecode still hidden } }","title":"Installation"},{"location":"contracts/Authentication/","text":"Authentication see the source Author: David Li Execution cost : less than 220 gas Deployment cost : less than 179200 gas Combined cost : less than 179420 gas Events UserCreated(address,bytes32,uint256) Execution cost : No bound available Params: _address of type address _name of type bytes32 _created_at of type uint256 UserDeleted(address) Execution cost : No bound available Params: _address of type address UserUpdated(address,bytes32) Execution cost : No bound available Params: _address of type address _name of type bytes32 Methods allUsers(uint256) Execution cost : less than 765 gas Attributes : constant Params: param_0 of type uint256 Returns: output_0 of type address destroy() destroy existing username Execution cost : less than 11678 gas login() Execution cost : less than 839 gas Attributes : constant Returns: username output_0 of type bytes32 signup(bytes32) checks if user exists If yes return user name If no, check if name was sent If yes, create and return user Execution cost : less than 83052 gas Attributes : payable Params: name of type bytes32 the username to be created. Returns: username of created user output_0 of type bytes32 update(bytes32) updating user name Execution cost : less than 22633 gas Attributes : payable Params: name of type bytes32 updating username Returns: updated username output_0 of type bytes32 Back to the top \u2191","title":"Authentication"},{"location":"contracts/Authentication/#authentication","text":"see the source Author: David Li Execution cost : less than 220 gas Deployment cost : less than 179200 gas Combined cost : less than 179420 gas","title":"Authentication"},{"location":"contracts/Authentication/#events","text":"","title":"Events"},{"location":"contracts/Authentication/#usercreatedaddressbytes32uint256","text":"Execution cost : No bound available Params: _address of type address _name of type bytes32 _created_at of type uint256","title":"UserCreated(address,bytes32,uint256)"},{"location":"contracts/Authentication/#userdeletedaddress","text":"Execution cost : No bound available Params: _address of type address","title":"UserDeleted(address)"},{"location":"contracts/Authentication/#userupdatedaddressbytes32","text":"Execution cost : No bound available Params: _address of type address _name of type bytes32","title":"UserUpdated(address,bytes32)"},{"location":"contracts/Authentication/#methods","text":"","title":"Methods"},{"location":"contracts/Authentication/#allusersuint256","text":"Execution cost : less than 765 gas Attributes : constant Params: param_0 of type uint256 Returns: output_0 of type address","title":"allUsers(uint256)"},{"location":"contracts/Authentication/#destroy","text":"destroy existing username Execution cost : less than 11678 gas","title":"destroy()"},{"location":"contracts/Authentication/#login","text":"Execution cost : less than 839 gas Attributes : constant Returns: username output_0 of type bytes32","title":"login()"},{"location":"contracts/Authentication/#signupbytes32","text":"checks if user exists If yes return user name If no, check if name was sent If yes, create and return user Execution cost : less than 83052 gas Attributes : payable Params: name of type bytes32 the username to be created. Returns: username of created user output_0 of type bytes32","title":"signup(bytes32)"},{"location":"contracts/Authentication/#updatebytes32","text":"updating user name Execution cost : less than 22633 gas Attributes : payable Params: name of type bytes32 updating username Returns: updated username output_0 of type bytes32 Back to the top \u2191","title":"update(bytes32)"},{"location":"contracts/ComplexStorage/","text":"ComplexStorage see the source ComplexStorage Author: David Li Execution cost : No bound available Deployment cost : less than 366400 gas Combined cost : No bound available Constructor Methods constuint() Execution cost : less than 316 gas Attributes : constant Returns: output_0 of type uint256 deviceDataArray(uint256) Execution cost : No bound available Attributes : constant Params: param_0 of type uint256 Returns: deviceBrand of type string deviceYear of type string batteryWearLevel of type string investmentsDeadlineTimeStamp() Execution cost : less than 586 gas Attributes : constant Returns: output_0 of type uint32 investmentsLimit() Execution cost : less than 597 gas Attributes : constant Returns: output_0 of type uint128 singleDD() Execution cost : No bound available Attributes : constant Returns: deviceBrand of type string deviceYear of type string batteryWearLevel of type string storeduint1() Execution cost : less than 406 gas Attributes : constant Returns: output_0 of type uint256 string1() Execution cost : less than 558 gas Attributes : constant Returns: output_0 of type bytes16 string2() Execution cost : less than 384 gas Attributes : constant Returns: output_0 of type bytes32 string3() Execution cost : No bound available Attributes : constant Returns: output_0 of type string uintarray(uint256) Execution cost : less than 750 gas Attributes : constant Params: param_0 of type uint256 Returns: output_0 of type uint256 Back to the top \u2191","title":"Complex Storage"},{"location":"contracts/ComplexStorage/#complexstorage","text":"see the source ComplexStorage Author: David Li Execution cost : No bound available Deployment cost : less than 366400 gas Combined cost : No bound available","title":"ComplexStorage"},{"location":"contracts/ComplexStorage/#constructor","text":"","title":"Constructor"},{"location":"contracts/ComplexStorage/#methods","text":"","title":"Methods"},{"location":"contracts/ComplexStorage/#constuint","text":"Execution cost : less than 316 gas Attributes : constant Returns: output_0 of type uint256","title":"constuint()"},{"location":"contracts/ComplexStorage/#devicedataarrayuint256","text":"Execution cost : No bound available Attributes : constant Params: param_0 of type uint256 Returns: deviceBrand of type string deviceYear of type string batteryWearLevel of type string","title":"deviceDataArray(uint256)"},{"location":"contracts/ComplexStorage/#investmentsdeadlinetimestamp","text":"Execution cost : less than 586 gas Attributes : constant Returns: output_0 of type uint32","title":"investmentsDeadlineTimeStamp()"},{"location":"contracts/ComplexStorage/#investmentslimit","text":"Execution cost : less than 597 gas Attributes : constant Returns: output_0 of type uint128","title":"investmentsLimit()"},{"location":"contracts/ComplexStorage/#singledd","text":"Execution cost : No bound available Attributes : constant Returns: deviceBrand of type string deviceYear of type string batteryWearLevel of type string","title":"singleDD()"},{"location":"contracts/ComplexStorage/#storeduint1","text":"Execution cost : less than 406 gas Attributes : constant Returns: output_0 of type uint256","title":"storeduint1()"},{"location":"contracts/ComplexStorage/#string1","text":"Execution cost : less than 558 gas Attributes : constant Returns: output_0 of type bytes16","title":"string1()"},{"location":"contracts/ComplexStorage/#string2","text":"Execution cost : less than 384 gas Attributes : constant Returns: output_0 of type bytes32","title":"string2()"},{"location":"contracts/ComplexStorage/#string3","text":"Execution cost : No bound available Attributes : constant Returns: output_0 of type string","title":"string3()"},{"location":"contracts/ComplexStorage/#uintarrayuint256","text":"Execution cost : less than 750 gas Attributes : constant Params: param_0 of type uint256 Returns: output_0 of type uint256 Back to the top \u2191","title":"uintarray(uint256)"},{"location":"contracts/FileList/","text":"FileList see the source Author: David Li Execution cost : less than 418 gas Deployment cost : less than 382200 gas Combined cost : less than 382618 gas Events fileAdded(uint256,string,bytes32) Execution cost : No bound available Params: fileid of type uint256 ipfshash of type string _filename of type bytes32 tagsAdded(bytes32[5]) Execution cost : No bound available Params: tags of type bytes32[5] Methods addFile(string,bytes32,bytes32[5]) updates mappings todos and lastIds Add a file to the list Execution cost : No bound available Params: ipfshash of type string an ipfshash returned after an image is finished uploaded _filename of type bytes32 name of file as a bytes32 as filenames should be short tags of type bytes32[5] array of bytes32 used for sorting/searching files (e,g. blockchain, school, textbook) files(address,uint256) Execution cost : No bound available Attributes : constant Params: param_0 of type address param_1 of type uint256 Returns: id of type uint256 ipfshash of type string filename of type bytes32 owner of type address timestamp of type uint256 getFileTags(address,uint256) return the tags for a specific file Execution cost : No bound available Attributes : constant Params: owner of type address --- address of person who uploaded the file _index of type uint256 --- the file desired, (first file uploaded, second , etc ...) Returns: output_0 of type bytes32[5] lastIds(address) Execution cost : less than 575 gas Attributes : constant Params: param_0 of type address Returns: output_0 of type uint256 maxAmountOfFiles() Execution cost : less than 272 gas Attributes : constant Returns: output_0 of type uint256 Back to the top \u2191","title":"FileList"},{"location":"contracts/FileList/#filelist","text":"see the source Author: David Li Execution cost : less than 418 gas Deployment cost : less than 382200 gas Combined cost : less than 382618 gas","title":"FileList"},{"location":"contracts/FileList/#events","text":"","title":"Events"},{"location":"contracts/FileList/#fileaddeduint256stringbytes32","text":"Execution cost : No bound available Params: fileid of type uint256 ipfshash of type string _filename of type bytes32","title":"fileAdded(uint256,string,bytes32)"},{"location":"contracts/FileList/#tagsaddedbytes325","text":"Execution cost : No bound available Params: tags of type bytes32[5]","title":"tagsAdded(bytes32[5])"},{"location":"contracts/FileList/#methods","text":"","title":"Methods"},{"location":"contracts/FileList/#addfilestringbytes32bytes325","text":"updates mappings todos and lastIds Add a file to the list Execution cost : No bound available Params: ipfshash of type string an ipfshash returned after an image is finished uploaded _filename of type bytes32 name of file as a bytes32 as filenames should be short tags of type bytes32[5] array of bytes32 used for sorting/searching files (e,g. blockchain, school, textbook)","title":"addFile(string,bytes32,bytes32[5])"},{"location":"contracts/FileList/#filesaddressuint256","text":"Execution cost : No bound available Attributes : constant Params: param_0 of type address param_1 of type uint256 Returns: id of type uint256 ipfshash of type string filename of type bytes32 owner of type address timestamp of type uint256","title":"files(address,uint256)"},{"location":"contracts/FileList/#getfiletagsaddressuint256","text":"return the tags for a specific file Execution cost : No bound available Attributes : constant Params: owner of type address --- address of person who uploaded the file _index of type uint256 --- the file desired, (first file uploaded, second , etc ...) Returns: output_0 of type bytes32[5]","title":"getFileTags(address,uint256)"},{"location":"contracts/FileList/#lastidsaddress","text":"Execution cost : less than 575 gas Attributes : constant Params: param_0 of type address Returns: output_0 of type uint256","title":"lastIds(address)"},{"location":"contracts/FileList/#maxamountoffiles","text":"Execution cost : less than 272 gas Attributes : constant Returns: output_0 of type uint256 Back to the top \u2191","title":"maxAmountOfFiles()"},{"location":"contracts/Migrations/","text":"Migrations see the source Author: David Li Execution cost : less than 20451 gas Deployment cost : less than 114400 gas Combined cost : less than 134851 gas Constructor Methods last_completed_migration() Execution cost : less than 406 gas Attributes : constant Returns: output_0 of type uint256 owner() Execution cost : less than 443 gas Attributes : constant Returns: output_0 of type address setCompleted(uint256) Execution cost : less than 20444 gas Params: completed of type uint256 integer upgrade(address) Execution cost : No bound available Params: new_address of type address Ethereum address for new migration Back to the top \u2191","title":"Migrations"},{"location":"contracts/Migrations/#migrations","text":"see the source Author: David Li Execution cost : less than 20451 gas Deployment cost : less than 114400 gas Combined cost : less than 134851 gas","title":"Migrations"},{"location":"contracts/Migrations/#constructor","text":"","title":"Constructor"},{"location":"contracts/Migrations/#methods","text":"","title":"Methods"},{"location":"contracts/Migrations/#last_completed_migration","text":"Execution cost : less than 406 gas Attributes : constant Returns: output_0 of type uint256","title":"last_completed_migration()"},{"location":"contracts/Migrations/#owner","text":"Execution cost : less than 443 gas Attributes : constant Returns: output_0 of type address","title":"owner()"},{"location":"contracts/Migrations/#setcompleteduint256","text":"Execution cost : less than 20444 gas Params: completed of type uint256 integer","title":"setCompleted(uint256)"},{"location":"contracts/Migrations/#upgradeaddress","text":"Execution cost : No bound available Params: new_address of type address Ethereum address for new migration Back to the top \u2191","title":"upgrade(address)"},{"location":"contracts/SimpleStorage/","text":"SimpleStorage see the source Execution cost : less than 111 gas Deployment cost : less than 58000 gas Combined cost : less than 58111 gas Events StorageSet(string) Execution cost : No bound available Params: _message of type string Methods set(uint256) Execution cost : less than 21780 gas Params: x of type uint256 an variable storedData() Execution cost : less than 384 gas Attributes : constant Returns: output_0 of type uint256 Back to the top \u2191","title":"Simple Storage"},{"location":"contracts/SimpleStorage/#simplestorage","text":"see the source Execution cost : less than 111 gas Deployment cost : less than 58000 gas Combined cost : less than 58111 gas","title":"SimpleStorage"},{"location":"contracts/SimpleStorage/#events","text":"","title":"Events"},{"location":"contracts/SimpleStorage/#storagesetstring","text":"Execution cost : No bound available Params: _message of type string","title":"StorageSet(string)"},{"location":"contracts/SimpleStorage/#methods","text":"","title":"Methods"},{"location":"contracts/SimpleStorage/#setuint256","text":"Execution cost : less than 21780 gas Params: x of type uint256 an variable","title":"set(uint256)"},{"location":"contracts/SimpleStorage/#storeddata","text":"Execution cost : less than 384 gas Attributes : constant Returns: output_0 of type uint256 Back to the top \u2191","title":"storedData()"},{"location":"contracts/TutorialToken/","text":"TutorialToken see the source Author: TutorialToken Execution cost : No bound available Deployment cost : less than 121800 gas Combined cost : No bound available Constructor Methods INITIAL_SUPPLY() Execution cost : less than 406 gas Attributes : constant Returns: output_0 of type uint256 decimals() Execution cost : less than 428 gas Attributes : constant Returns: output_0 of type uint256 name() Execution cost : No bound available Attributes : constant Returns: output_0 of type string symbol() Execution cost : No bound available Attributes : constant Returns: output_0 of type string Back to the top \u2191","title":"Tutorial Token"},{"location":"contracts/TutorialToken/#tutorialtoken","text":"see the source Author: TutorialToken Execution cost : No bound available Deployment cost : less than 121800 gas Combined cost : No bound available","title":"TutorialToken"},{"location":"contracts/TutorialToken/#constructor","text":"","title":"Constructor"},{"location":"contracts/TutorialToken/#methods","text":"","title":"Methods"},{"location":"contracts/TutorialToken/#initial_supply","text":"Execution cost : less than 406 gas Attributes : constant Returns: output_0 of type uint256","title":"INITIAL_SUPPLY()"},{"location":"contracts/TutorialToken/#decimals","text":"Execution cost : less than 428 gas Attributes : constant Returns: output_0 of type uint256","title":"decimals()"},{"location":"contracts/TutorialToken/#name","text":"Execution cost : No bound available Attributes : constant Returns: output_0 of type string","title":"name()"},{"location":"contracts/TutorialToken/#symbol","text":"Execution cost : No bound available Attributes : constant Returns: output_0 of type string Back to the top \u2191","title":"symbol()"}]}